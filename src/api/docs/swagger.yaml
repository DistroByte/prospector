definitions:
  controllers.Component:
    properties:
      image:
        type: string
      name:
        type: string
      network:
        $ref: '#/definitions/controllers.Network'
      resources:
        $ref: '#/definitions/controllers.Resources'
      user_config:
        $ref: '#/definitions/controllers.UserConfig'
    required:
    - name
    type: object
  controllers.GetUserNameResponse:
    properties:
      userID:
        type: string
      userName:
        type: string
    type: object
  controllers.Job:
    properties:
      components:
        items:
          $ref: '#/definitions/controllers.Component'
        type: array
      name:
        type: string
      type:
        type: string
      user:
        type: string
    required:
    - components
    - name
    - type
    type: object
  controllers.Message:
    properties:
      message:
        type: string
    type: object
  controllers.Network:
    properties:
      expose:
        default: false
        type: boolean
      mac:
        type: string
      port:
        maximum: 65535
        minimum: 0
        type: integer
    type: object
  controllers.Resources:
    properties:
      cpu:
        maximum: 2000
        minimum: 0
        type: integer
      memory:
        maximum: 2000
        minimum: 0
        type: integer
    type: object
  controllers.UserConfig:
    properties:
      ssh_key:
        type: string
      user:
        type: string
    type: object
info:
  contact: {}
paths:
  /health:
    get:
      consumes:
      - application/json
      description: Check if the API is up and running
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Health check
      tags:
      - health
  /login:
    post:
      consumes:
      - application/json
      description: Login
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Login
      tags:
      - auth
  /v1/jobs:
    get:
      consumes:
      - application/json
      description: Get all jobs from nomad
      parameters:
      - description: Get long job details
        in: query
        name: long
        type: boolean
      - description: Get running jobs
        in: query
        name: running
        type: boolean
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      summary: Get all jobs
      tags:
      - job
    post:
      consumes:
      - application/json
      description: Create and submit a job for nomad to deploy
      parameters:
      - description: Job
        in: body
        name: job
        required: true
        schema:
          $ref: '#/definitions/controllers.Job'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.Message'
      security:
      - BearerAuth: []
      summary: Create a job in nomad
      tags:
      - job
  /v1/jobs/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a job from nomad
      parameters:
      - description: Job ID
        in: path
        name: id
        required: true
        type: string
      - description: Purge job
        in: query
        name: purge
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.Message'
      security:
      - BearerAuth: []
      summary: Delete a job
      tags:
      - job
    get:
      consumes:
      - application/json
      description: Get a job from nomad
      parameters:
      - description: Job ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      summary: Get a job
      tags:
      - job
  /v1/jobs/{id}/restart:
    put:
      consumes:
      - application/json
      description: Restart a job in nomad
      parameters:
      - description: Job ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.Message'
      security:
      - BearerAuth: []
      summary: Restart a job
      tags:
      - job
  /v1/refresh:
    get:
      consumes:
      - application/json
      description: Refresh token
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Refresh token
      tags:
      - auth
  /v1/user:
    get:
      consumes:
      - application/json
      description: Get user name
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.GetUserNameResponse'
      security:
      - BearerAuth: []
      summary: Get user name
      tags:
      - auth
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
